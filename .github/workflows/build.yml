name: Build
on: [push]

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Environment
        run: |
          export FLASK_APP=app.py
          echo "Setup complete"

  python-format:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install dependencies
        run: |
          pip install black mypy
          pip install -r requirements.txt
      - name: Run Black
        run: black . --line-length 79
      - name: Commit changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git diff --quiet && git diff --staged --quiet || (git commit -m "Apply automatic formatting changes" && git push)

#  python-lint:
#    needs: python-format
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#      - name: Setup Python
#        uses: actions/setup-python@v4
#        with:
#          python-version: '3.12'
#      - name: Install dependencies
#        run: |
#          pip install flake8 pylint
#      - name: Run linting
#        run: |
#          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
#          pylint src/

  quality-checks:
    needs: python-format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install dependencies
        run: |
          pip install flake8 pylint pytest pytest-cov black mypy
          pip install -r requirements.txt
      - name: Run flake8
        run: |
          flake8 . \
            --count \
            --select=E9,F63,F7,F82,F401,F841 \
            --show-source \
            --statistics \
            --exclude=.git,__pycache__,build,dist
      - name: Run pylint
        run: |
          pylint app/ \
            --disable=C0111,C0103,C0303,W0621,R0903,R0913,R0914,W0511 \
            --max-line-length=79
      - name: Run mypy
        run: mypy app/
      - name: Run tests
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
        run: |
          pytest tests/ --cov=app --cov-report=xml

  build-docker-image:
    needs: quality-checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        run: |
          echo "${{ secrets.ORG_GHCR_TOKEN }}" | docker login ghcr.io --username "oosborgschmitz" --password-stdin

      - name: Build Docker Image
        run: |
          IMAGE_NAME=ghcr.io/sse-movies/user-authentication:latest
          docker build -t $IMAGE_NAME .

      - name: Push Docker Image to GHCR
        run: |
          IMAGE_NAME=ghcr.io/sse-movies/user-authentication:latest
          docker push $IMAGE_NAME
  
  deploy-azure-container-app:
    needs: build-docker-image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.GENERALAPPTESTING_AZURE_CREDENTIALS }}

      - name: Deploy to Azure Container App
        run: |
          az containerapp update \
            --name user-authentication \
            --resource-group SSE-movies \
            --image ghcr.io/sse-movies/user-authentication:latest

      - name: Azure Logout
        run: az logout